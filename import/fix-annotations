#!/usr/bin/env raku

use v6;

use DB::Pg;

use NativeCall; # only for floating point reading routines

my $debugannotation = False;
my $debug = 0;

# Define some useful debugging routines
#
# These should be moved to a separate module

sub dump-hex(@bytes, $width) {
    $*ERR.print: (@bytes.map: {sprintf "%02.2x", $_}).join(' ');
    $*ERR.print: '   ' x max(0, $width - @bytes.elems);
}

sub dump-ascii(@bytes, $width) {
    $*ERR.print: '<';
    $*ERR.print: (@bytes.map:{ $_ ~~ 32..126 ?? $_.chr !! '.' }).join('');
    $*ERR.print: ' ' x max(0, $width - @bytes.elems);
    $*ERR.print: '>';
}

sub hex-dump(@bytes, $start, $count) {
    $*ERR.printf: "%08.8x ", $start;
    dump-hex(@bytes, $count);
    $*ERR.print: '  ';
    dump-ascii(@bytes, $count);
    $*ERR.print: "\n";
}

sub dump-blob($blob, $start is copy, $width = 16) {
    my $bytes = $blob.elems;
    my $offset = 0;
    while $bytes > 0 {
        my @bytes = $blob.subbuf($offset, $width).list;
        hex-dump(@bytes, $start, $width);
        $start += $width;
        $offset += $width;
        $bytes -= $width;
    }
}

class Annotation {
  has $!length;
  has @!bytes;
  has $!index;

  my %tobin = ('0' => 0, '1' => 1, '2' => 2, '3' => 3,
               '4' => 4, '5' => 5, '6' => 6, '7' => 7,
               '8' => 8, '9' => 9,
	       'a' => 10, 'b' => 11, 'c' => 12, 'd' => 13, 'e' => 14, 'f' => 15,
	       'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15
              );

  use experimental :pack;

  method start($annotation) {
    note $annotation if $debugannotation;
    $!index = 0;
    $!length = $annotation.elems;
    if $debug {
        note "annotation of length $!length";
        dump-blob($annotation, 0);
    }
    for ^$!length -> $i {
      @!bytes.push($annotation.subbuf($i, 1).unpack('C'));
    }
  }

  method skip(Int $skip) {
    note "skipping $skip bytes at $!index" if $debugannotation;
    $!index += $skip;
  }

  method byte {
    fail('annotation out of range') if $!index >= $!length;
    note "about to read byte number $!index (@!bytes[$!index])" if $debugannotation;
    @!bytes[$!index++];
  }

  method getbytes(Int $count) {
    note "getbytes $count from $!index" if $debugannotation;
    $!index += $count;
    @!bytes[($!index-$count) ..^ $!index - 1]>>.chr.join;
  }

  method getutf16(Int $count) {
    $!index += $count;
    my @utf16;
    for @!bytes[($!index-$count) ..^ $!index - 2] -> $l, $h { @utf16.push: $h*256 + $l };
    @utf16>>.chr.join;
  }

  method string {
    note "read string at $!index" if $debugannotation;
    my $length = self.int;
    note "reading string of length $length" if $debugannotation;
    self.getutf16($length);
  }

  method colour {
    my $cyan    = self.byte / 100;
    my $magenta = self.byte / 100;
    my $yellow  = self.byte / 100;
    my $black   = self.byte / 100;
    ($cyan, $magenta, $yellow, $black);
  }

  method astring {
    my $length = self.byte;
    self.getbytes($length);
  }

  method lastring {
    my $length = self.int;
    self.getbytes($length);
  }

  method short {
     $!index += 2;
     nativecast((int32), Blob.new(@!bytes[$!index-2 ..^ $!index]));
  }

  method int {
     $!index += 4;
     nativecast((int32), Blob.new(@!bytes[$!index-4 ..^ $!index]));
  }

  method double {
    $!index += 8;
    nativecast((num64), Blob.new(@!bytes[($!index-8) ..^ $!index]));
  }

}

my $object-count = 0;

if $debug {
  $*OUT.out-buffer = False;
  $*ERR.out-buffer = False;
}

sub format($value is copy) {
    $value ~~ s:g/\\/\\\\/;
    $value ~~ s:g/\n/\\n/;
    $value ~~ s:g/\r/\\r/;
    $value ~~ s:g/\t/\\t/;
    $value;
}

sub MAIN($db, $table1, $table2) {
  my $pg = DB::Pg.new(conninfo => "dbname=$db");

  my $results = $pg.query("SELECT element,
                                  st_astext(shape) AS shape,
                                  objectid
                             FROM $table1
                          ");
    
    for $results.arrays -> $object {
note "Start loop" if $debugannotation;
	++$object-count;
	my $element  = $object[0];
	my $shape    = $object[1];
        my $objectid = $object[2].Int;
	my ($string2, $string3, $font);
	my ($x1, $y1, $x2, $y2);
	my $unknown1;
	my $justn = 0;
	my ($rotangle, $xdiff, $ydiff);
        note "Object ID: $objectid" if $debug ≥ 10;
	
	my $ann = Annotation.new();
        $ann.start($element);

# The following horrendous code is an attempt to extract data from the undocumented annotations in the Australian 1:250000 series maps
# It's also extremely slow :-(
	$ann.skip(54);
	$string2 = $ann.string;
	note "draw-ga-annotation: $string2" if $debug ≥ 10;
	$unknown1 = $ann.byte;
        $ann.skip(21);
	$unknown1 = $ann.byte;
        $ann.skip(15);
	$unknown1 = $ann.short();
	$unknown1 = $ann.short();
	my ($cyan, $magenta, $yellow, $black) = $ann.colour;
	note "colour: $cyan $magenta $yellow $black\n" if $debug ≥ 10;
        $ann.skip(2);
	$unknown1 = $ann.int;
	$ann.skip(21) if ($unknown1 == 0);
	$unknown1 = $ann.int;
	$justn = $ann.int;
        $ann.skip(2);
	$rotangle = $ann.double;
	$xdiff = $ann.double;
	$ydiff = $ann.double;
        $ann.skip(110);
	$unknown1 = $ann.short;
        $ann.skip(61);
	$string3 = $ann.string;
        $ann.skip(6);
	note "Second copy of string: $string3\n" if $debug ≥ 10;
	my $pointsize = $ann.byte;
	$pointsize = $pointsize / 4 * 25.4 / 72;
	note "Point size: $pointsize\n" if $debug ≥ 10;
        $ann.skip(48);
	$unknown1 = $ann.byte;
	$unknown1 = $ann.short;
	$pointsize = $ann.int;
	$pointsize = $pointsize / 10000 * 25.4 / 72;
	$font = $ann.astring;
	note "Font: $font\n" if $debug ≥ 10;
        $ann.skip(18);
	$unknown1 = $ann.byte;
	$*ERR.print: "unknown1: $unknown1\n" if $debug; ###
	if ($unknown1 == 16) {
            $ann.skip(17);
	    $unknown1 = $ann.short;
            $ann.skip(6);
	    $x1 = $ann.double;
	    $y1 = $ann.double;
	    $x2 = $ann.double;
	    $y2 = $ann.double;
            
	    $*ERR.print: "16: $x1 $y1 $x2 $y2\n" if $debug; ###
            next unless $x1 == $x1 && $x2 == $x2 && $y1 == $y1 && $y2 == $y2; # next if any Nan
            $ann.skip(4);
	    my $count = $ann.int;
            $ann.skip(4);
	    $*ERR.print: "count: $count\n" if $debug; ###
	    if $count {
		my @coords = ();
		while ($count--) {
		    my $x = $ann.double;
		    my $y = $ann.double;
		    push @coords, [$x, $y];
		}
		($x1, $y1) = @(@coords[0]);
		($x2, $y2) = @(@coords[1]);
                $xdiff = 0;
                $ydiff = 0;
                $justn = 0;
            }
        } elsif ($unknown1 == 65) {
            $ann.skip(17);
            $unknown1 = $ann.short;
            $ann.skip(6);
            $x1 = $ann.double;
            $y1 = $ann.double;
            note "65: $x1 $y1\n" if $debug ≥ 10;
            $xdiff = $ydiff = 0;
        } else {
            note "Unknown annotation value $unknown1, ignoring\n";
            next;
        }
        $ann.skip(18);
        $ann.lastring;
        $ann.skip(41);
        
        note "Drawing annotation" if $debugannotation;
        # finished parsing; now print something
        
        # Check for valid location -- sometimes we get lat/lon with NaN values!
        if ($x1 == $x1 and $y1 == $y1) {
            my $annotation = $string2;
            my $angle;
            if ($y2.defined) {
                $angle = atan2($y2 - $y1, $x2 - $x1) * 180 / π;
            } else {
                $angle = 0;
            }
            $annotation ~~ s:g/\\/\\\\/;
            $annotation ~~ s:g/\(/\\\(/;
            $annotation ~~ s:g/\)/\\\)/;
            my @values;
            @values.push: format($annotation);
            @values.push: format($x1);
            @values.push: format($y1);
            @values.push: format($angle);
            @values.push: format("$cyan $magenta $yellow $black");
            @values.push: format($font);
            @values.push: format($pointsize);
            @values.push: format($justn);
            dd @values if $debug;
            say "\"$annotation\": $x1, $y1 orientation $angle, colour：$cyan $magenta $yellow $black, $font, size：$pointsize, justification: $justn" if $debug;
            my $values = (@values.join: "	") ~ "\n"; # That's a tab folks
            print $values;
        }
    }
}

