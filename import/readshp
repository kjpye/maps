#!/usr/bin/env raku

use NativeCall;

my $shp;
my $shp-i;
my $shx;
my $shx-i;
my $dbf;
my $dbf-i;

sub skip($buf, $index is rw, $count) {
  $index += $count;
}

sub read-be-int ($buf, $index is rw) {
  my $val = $buf[$index++];
  $val +<= 8;
  $val += $buf[$index++];
  $val +<= 8;
  $val += $buf[$index++];
  $val +<= 8;
  $val += $buf[$index++];
}

sub read-le-int ($buf, $index is rw) {
  my $val = $buf[$index++];
  $val += $buf[$index++] +< 8;
  $val += $buf[$index++] +< 16;
  $val += $buf[$index++] +< 24;
}

sub read-le-short ($buf, $index is rw) {
  my $val = $buf[$index++];
  $val += $buf[$index++] +< 8;
}

sub read-double ($buf, $index is rw) {
  $index += 8;
  nativecast((num64), Blob.new($buf[($index-8) ..^ $index]));
}

sub read-byte ($buf, $index is rw) {
  my $val = $buf[$index++];
}

sub read-chars ($buf, $index is rw, $length) {
  my $string  = '';
  for ^$length {
    my $chr = read-byte($buf, $index);
    $string ~= $chr.chr if $chr;
  }
  $string;
}

sub read-dbf-header-record($buf, $index is rw) {
  my $field-name         =  read-chars($buf, $index, 11);
  my $field-type         =   read-byte($buf, $index);
  my $displacement       = read-le-int($buf, $index);
  my $field-length       =   read-byte($buf, $index);
  my $decimals           =   read-byte($buf, $index);
  my $field-flags        =   read-byte($buf, $index);
  my $autoincrement-next = read-le-int($buf, $index);
  my $step-value         =   read-byte($buf, $index);
                                  skip($buf, $index, 8);
  %(name          => $field-name,
    type          => $field-type.chr,
    displacement  => $displacement,
    length        => $field-length,
    decimals      => $decimals,
    flags         => $field-flags,
    autoincrement => $autoincrement-next,
    step          => $step-value
  )
}

sub read-shp-record {
  my $record-number  = read-be-int($shp, $shp-i);
  my $content-length = read-be-int($shp, $shp-i);
  my $shape-type     = read-le-int($shp, $shp-i);
say "Reading record type $shape-type";
  given $shape-type {
# These are ordered according to the documentation
    when 0 {  # Null
      return "NULL";
    }
    when 1 {  # Point
      my $x = read-double($shp, $shp-i);
      my $y = read-double($shp, $shp-i);
      return "{$x},{$y}";
    }
   when 8 {  # MultiPoint
      my $xmin       = read-double($shp, $shp-i);
      my $ymin       = read-double($shp, $shp-i);
      my $xmax       = read-double($shp, $shp-i);
      my $ymax       = read-double($shp, $shp-i);
      my $num-points = read-le-int($shp, $shp-i);
      my $ret = 'MultiPoint: (';
      for ^$num-points {
        my $x = read-double($shp, $shp-i);
        my $y = read-double($shp, $shp-i);
        $ret ~= "($x,$y) ";
      }
      $ret ~~ s/\s$/))/;
      return $ret;
   }
    when 3 {  # PolyLine
      my $xmin       = read-double($shp, $shp-i);
      my $ymin       = read-double($shp, $shp-i);
      my $xmax       = read-double($shp, $shp-i);
      my $ymax       = read-double($shp, $shp-i);
      my $num-parts  = read-le-int($shp, $shp-i);
      my $num-points = read-le-int($shp, $shp-i);
      my @index;
      for ^$num-parts {
        @index.push: read-le-int($shp, $shp-i);
      }
      @index.push: -1; # end flag
      my $nextpart = @index.shift; # should be 0
      $nextpart    = @index.shift; # the start of the second line part
      my $ret = 'PolyLine: ((';
      for ^$num-points -> $num {
        if $num == $nextpart {
          $ret ~= ') (';
        }
        my $x = read-double($shp, $shp-i);
        my $y = read-double($shp, $shp-i);
        $ret ~= "$x,$y ";
      }
      $ret ~~ s/\s$/))/;
      return $ret;
    }
   when 5 {  # Polygon
      my $xmin       = read-double($shp, $shp-i);
      my $ymin       = read-double($shp, $shp-i);
      my $xmax       = read-double($shp, $shp-i);
      my $ymax       = read-double($shp, $shp-i);
      my $num-parts  = read-le-int($shp, $shp-i);
      my $num-points = read-le-int($shp, $shp-i);
      my @index;
      for ^$num-parts {
        @index.push: read-le-int($shp, $shp-i);
      }
      @index.push: -1; # end flag
      my $nextpart = @index.shift; # should be 0
      $nextpart    = @index.shift; # the start of the second line part
      my $ret = 'Polygon: ((';
      for ^$num-points -> $num {
        if $num == $nextpart {
          $ret ~= ') (';
        }
        my $x = read-double($shp, $shp-i);
        my $y = read-double($shp, $shp-i);
        $ret ~= "$x,$y ";
      }
      $ret ~~ s/\s$/))/;
      return $ret;
   }
   when 21 { # PointM
      my $x = read-double($shp, $shp-i);
      my $y = read-double($shp, $shp-i);
      my $m = read-double($shp, $shp-i);
      return "{$x},{$y};{$m}";
   }
#   when 28 { # MultiPointM
#   }
#   when 23 { # PolyLineM
#   }
#   when 25 { # PolygonM
#   }
#   when 11 { # PointZ
#   }
#   when 18 { # MultiPointZ
#   }
#   when 13 { # PolyLineZ
#   }
#   when 15 { # PolygonZ
#   }
#   when 31 { # MultiPatch
#   }
    skip($shp, $shp-i, ($content-length-1)*2);
    note "Unknown shp record type {$shape-type}";
    return "UNKNOWN {$shape-type}";
  }
}

my @dbf-fields;

sub read-dbf-record {
  my %val;
    skip($dbf, $dbf-i, 1); # Why???
    for @dbf-fields -> %field {
      my $name = %field<name>;
      my $value = read-chars($dbf, $dbf-i, %field<length>);
      %val{$name} = $value;
    }
  %val;
}

multi sub MAIN($prefix) {
  $shp = slurp "$prefix.shp", :bin;
  $shp-i = 0; # index into $shp

  $shx = slurp "$prefix.shx", :bin;
  $shx-i = 0; # index into $shx

  $dbf = slurp "$prefix.dbf", :bin;
  $dbf-i = 0; # index into $dbf


# Read shp header

  my $file-code = read-be-int($shp, $shp-i);
  say $file-code;
  skip($shp, $shp-i, 20);
  my $length = read-be-int($shp, $shp-i);
  say $length;
  my $version = read-le-int($shp, $shp-i);
  say $version;
  my $shape-type = read-le-int($shp, $shp-i);
  say $shape-type;
  my $xmin = read-double($shp, $shp-i);
  my $ymin = read-double($shp, $shp-i);
  my $xmax = read-double($shp, $shp-i);
  my $ymax = read-double($shp, $shp-i);
  my $zmin = read-double($shp, $shp-i);
  my $zmax = read-double($shp, $shp-i);
  my $mmin = read-double($shp, $shp-i);
  my $mmax = read-double($shp, $shp-i);
  say "$xmin $xmax $ymin $ymax $zmin $zmax $mmin $mmax";
  say "Read shp header -- index is $shp-i";

# Read dbf header
  my $dbf-type     = read-byte($dbf, $dbf-i);
  die "Incorrect dbf file type\n" unless $dbf-type == 3;
  my $year         = 1900 + read-byte($dbf, $dbf-i);
  my $month        = read-byte($dbf, $dbf-i);
  my $day          = read-byte($dbf, $dbf-i);
  say "Last modification date: $year-$month-$day";
  my $records      = read-le-int($dbf, $dbf-i);
  say "$records records";
  my $first-offset = read-le-short($dbf, $dbf-i);
  say "Initial offset $first-offset";
  my $record-length = read-le-short($dbf, $dbf-i);
  say "Record length $record-length";
  skip($dbf, $dbf-i, 2);
  my $incomplete-transaction = read-byte($dbf, $dbf-i);
  my $encrytion = read-byte($dbf, $dbf-i);
  skip($dbf, $dbf-i, 12);
  my $table-flags = read-byte($dbf, $dbf-i);
  my $code-page-mark = read-byte($dbf, $dbf-i);
  skip($dbf, $dbf-i, 2);

# Read dbf field information

  while $dbf[$dbf-i] != 13 {
    @dbf-fields.push(read-dbf-header-record($dbf, $dbf-i));
  }
  skip($dbf, $dbf-i, 1); # ???

  say "{@dbf-fields.elems} fields";

  for ^$records -> $num {
    say "Reading record {$num+1}";
    my $shp-record = read-shp-record();
    my %dbf-record = read-dbf-record();
    for %dbf-record.kv -> $key, $value {
      say "$key: \"$value\"";
    }
    say "geometry: $shp-record";
  }
}
multi sub MAIN('csv', $prefix) {
  $shp = slurp "$prefix.shp", :bin;
  $shp-i = 0; # index into $shp

  $shx = slurp "$prefix.shx", :bin;
  $shx-i = 0; # index into $shx

  $dbf = slurp "$prefix.dbf", :bin;
  $dbf-i = 0; # index into $dbf


# Read shp header

  my $file-code = read-be-int($shp, $shp-i);
  say $file-code;
  skip($shp, $shp-i, 20);
  my $length = read-be-int($shp, $shp-i);
  say $length;
  my $version = read-le-int($shp, $shp-i);
  say $version;
  my $shape-type = read-le-int($shp, $shp-i);
  say $shape-type;
  my $xmin = read-double($shp, $shp-i);
  my $ymin = read-double($shp, $shp-i);
  my $xmax = read-double($shp, $shp-i);
  my $ymax = read-double($shp, $shp-i);
  my $zmin = read-double($shp, $shp-i);
  my $zmax = read-double($shp, $shp-i);
  my $mmin = read-double($shp, $shp-i);
  my $mmax = read-double($shp, $shp-i);
  say "$xmin $xmax $ymin $ymax $zmin $zmax $mmin $mmax";
  say "Read shp header -- index is $shp-i";

# Read dbf header
  my $dbf-type     = read-byte($dbf, $dbf-i);
  die "Incorrect dbf file type\n" unless $dbf-type == 3;
  my $year         = 1900 + read-byte($dbf, $dbf-i);
  my $month        = read-byte($dbf, $dbf-i);
  my $day          = read-byte($dbf, $dbf-i);
  say "Last modification date: $year-$month-$day";
  my $records      = read-le-int($dbf, $dbf-i);
  say "$records records";
  my $first-offset = read-le-short($dbf, $dbf-i);
  say "Initial offset $first-offset";
  my $record-length = read-le-short($dbf, $dbf-i);
  say "Record length $record-length";
  skip($dbf, $dbf-i, 2);
  my $incomplete-transaction = read-byte($dbf, $dbf-i);
  my $encrytion = read-byte($dbf, $dbf-i);
  skip($dbf, $dbf-i, 12);
  my $table-flags = read-byte($dbf, $dbf-i);
  my $code-page-mark = read-byte($dbf, $dbf-i);
  skip($dbf, $dbf-i, 2);

# Read dbf field information

  while $dbf[$dbf-i] != 13 {
    @dbf-fields.push(read-dbf-header-record($dbf, $dbf-i));
  }
  skip($dbf, $dbf-i, 1); # ???

  say "{@dbf-fields.elems} fields";

  # output header line
  for @dbf-fields -> $field {
    print '"', $field<name>, '",';
  }
  print "GEOMETRY\n";

  for ^$records -> $num {
	 #say "Reading record {$num+1}";
    my $shp-record = read-shp-record();
    my %dbf-record = read-dbf-record();
    for @dbf-fields -> $field {
      my $value = %dbf-record{$field<name>};
      $value ~~ s/^\s+//;
      $value ~~ s/\s+$//;
      print '"', $value, '",';
    }
    #for %dbf-record.kv -> $key, $value {
	    #say "$key: \"$value\"";
	    #}
    print '"', $shp-record, "\"\n";
  }
}
